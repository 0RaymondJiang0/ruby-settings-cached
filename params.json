{"body":"# Settings Gem\r\n\r\nThis is improved from rails-settings, added caching for all settings.\r\nSettings is a plugin that makes managing a table of global key, value pairs easy.\r\nThink of it like a global Hash stored in you database, that uses simple ActiveRecord\r\nlike methods for manipulation.  Keep track of any global setting that you dont want\r\nto hard code into your rails app.  You can store any kind of object.  Strings, numbers,\r\narrays, or any object. Ported to Rails 3!\r\n\r\n## Status\r\n\r\n[![CI Status](https://secure.travis-ci.org/huacnlee/rails-settings-cached.png)](http://travis-ci.org/huacnlee/rails-settings-cached)\r\n\r\n## Setup\r\n\r\nEdit your Gemfile:\r\n\r\n```ruby\r\ngem \"rails-settings-cached\"\r\n```\r\n\r\nGenerate your settings:\r\n\r\n```bash\r\n$ rails g settings <settings_name>\r\n```\r\n\r\nNow just put that migration in the database with:\r\n    \r\n```bash\r\nrake db:migrate\r\n```\r\n\r\n## Usage\r\n\r\nThe syntax is easy.  First, lets create some settings to keep track of:\r\n\r\n```ruby\r\nSetting.admin_password = 'supersecret'\r\nSetting.date_format    = '%m %d, %Y'\r\nSetting.cocktails      = ['Martini', 'Screwdriver', 'White Russian']\r\nSetting.foo            = 123\r\nSetting.credentials    = { :username => 'tom', :password => 'secret' }\r\n```\r\n\r\nNow lets read them back:\r\n\r\n```ruby\r\nSetting.foo            # returns 123\r\n```\r\n\r\nChanging an existing setting is the same as creating a new setting:\r\n\r\n```ruby\r\nSetting.foo = 'super duper bar'\r\n```\r\n\r\nFor changing an existing setting which is a Hash, you can merge new values with existing ones:\r\n\r\n```ruby\r\nSetting.merge!(:credentials, :password => 'topsecret')\r\nSetting.credentials    # returns { :username => 'tom', :password => 'topsecret' }\r\n```\r\n\r\nDecide you dont want to track a particular setting anymore?\r\n\r\n```ruby\r\nSetting.destroy :foo\r\nSetting.foo            # returns nil\r\n```\r\n\r\nWant a list of all the settings?\r\n\r\n```ruby\r\nSetting.all    \r\n# returns {'admin_password' => 'super_secret', 'date_format' => '%m %d, %Y'}        \r\n```\r\n\r\nYou need name spaces and want a list of settings for a give name space? Just choose your prefered named space delimiter and use Setting.all like this:\r\n\r\n```ruby\r\nSetting['preferences.color'] = :blue\r\nSetting['preferences.size'] = :large\r\nSetting['license.key'] = 'ABC-DEF'\r\nSetting.all('preferences.')   \r\n# returns { 'preferences.color' => :blue, 'preferences.size' => :large }\r\n```\r\n\r\nSet defaults for certain settings of your app.  This will cause the defined settings to return with the\r\nSpecified value even if they are not in the database.  Make a new file in `config/initializers/default_settings.rb`\r\nwith the following:\r\n\r\n```ruby\r\nSetting.defaults[:some_setting] = 'footastic'\r\n```\r\n  \r\nNow even if the database is completely empty, you app will have some intelligent defaults:\r\n\r\n```ruby\r\nSetting.some_setting   # returns 'footastic'\r\n```\r\n\r\nSettings may be bound to any existing ActiveRecord object. Define this association like this:\r\nNotice! is not do caching in this version.\r\n  \r\n```ruby\r\nclass User < ActiveRecord::Base\r\n  include RailsSettings::Extend \r\nend\r\n```\r\n\r\nThen you can set/get a setting for a given user instance just by doing this:\r\n\r\n```ruby\r\nuser = User.find(123)\r\nuser.settings.color = :red\r\nuser.settings.color # returns :red\r\nuser.settings.all # { \"color\" => :red }\r\n```\r\n\r\nI you want to find users having or not having some settings, there are named scopes for this:\r\n\r\n```ruby\r\nUser.with_settings \r\n# => returns a scope of users having any setting\r\n\r\nUser.with_settings_for('color') \r\n# => returns a scope of users having a 'color' setting\r\n\r\nUser.without_settings \r\n# returns a scope of users having no setting at all (means user.settings.all == {})\r\n\r\nUser.without_settings('color') \r\n# returns a scope of users having no 'color' setting (means user.settings.color == nil)\r\n```\r\n\r\nThat's all there is to it! Enjoy!\r\n","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"rails-settings-cached","tagline":"This is imporved from rails-settings, added caching for all settings","google":"UA-9745660-1"}